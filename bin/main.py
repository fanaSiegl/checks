#!/usr/bin/python
# -*- coding: utf-8 -*-

'''

Project name
============

Project function description.

Usage
-----

project_name [input parameter]

Description
-----------

* requires something
* does something
* creates something as an output


'''

'''
IDIADA checks
=============

Additional ANSA check can be implemented into ANSA by pyProjectInstaller. In 
order to do so a new ANSA check template should be generated by newPyProject
(check "newPyProject --help" for further details).

.. note::
    ANSA_UserDefined.plist is generated by "update_ansa_checks" script.
    It wraps all ANSA check scripts and handles their
    documentation and versions as one single tool.

'''

#=========================== to be modified ===================================

APPLICATION_NAME = 'update_ansa_checks'
DOCUMENTATON_GROUP = 'ANSA tools'
DOCUMENTATON_DESCRIPTION = 'IDIADA ANSA checks documentation.'

#==============================================================================

import os
import sys
import argparse
import shutil

from domain import utils

#==============================================================================

PLIST_GENERATOR_NAME = 'generate_plist.py'
ANSA_EXECITABLE = '/usr1/applications/ansa/BETA_CAE_Systems/ansa_v18.1.1/ansa64.sh'

#==============================================================================
    
class AnsaChecksPlistUpdater(object):
        
    #--------------------------------------------------------------------------
    @staticmethod
    def createPlist():
        
        # create plist for available checks and the documentation string 
        command = '%s -nogui -execscript %s' % (ANSA_EXECITABLE,
            os.path.join(utils.PATH_BIN, PLIST_GENERATOR_NAME))
        
        stdout, stderr = utils.runSubprocess(command, cwd=utils.PATH_BIN)
        
        for line in stdout.splitlines():
            print(line.decode("utf-8"))
    
    #--------------------------------------------------------------------------
    @staticmethod
    def copyChecks(path):
        
        ''' Copies all checks from RES to installation target directory.'''
        
        for checkFileName in os.listdir(os.path.join(utils.PATH_RES, 'checks')):
            if checkFileName.startswith('check_'):
                src = os.path.join(utils.PATH_RES, 'checks', checkFileName)
                dst = os.path.join(path, checkFileName)
                
                # replace existing
                if os.path.isfile(dst):
                    os.remove(dst)
                    
                print 'Copying: %s' % checkFileName
                shutil.copy(src, dst)

#==============================================================================

def main():
    
    parser = argparse.ArgumentParser(description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
#     parser.add_argument('srcPath', nargs='?', metavar='source check path',
#         help='Destination path where to create *.plist if different from default.',)
    parser.add_argument('-copy', nargs=1, dest='destPath',
        help='Destination path where to copy all checks.')

    args = parser.parse_args()
        
    # copy all check_*.py files to /default/ path
    if args.destPath:
        if os.path.isdir(args.destPath[0]):
            AnsaChecksPlistUpdater.copyChecks(args.destPath[0])
        else:
            print 'Given path does not exist!'
            sys.exit(1)
    
    # create plist from current check_*.py files in /default/ path
#     if args.srcPath:
#         if os.path.isdir(args.srcPath):
#             AnsaChecksPlistUpdater.createPlist(args.srcPath)
#         else:
#             print 'Given source path does not exist!'
#     else:
    AnsaChecksPlistUpdater.createPlist()

           
#==============================================================================

if __name__ == '__main__':
    main()

    